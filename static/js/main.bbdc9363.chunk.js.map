{"version":3,"sources":["store/lives.ts","store/liverImages.ts","components/AppEffect.tsx","components/GlobalStyle.tsx","util/groupByDay.ts","components/LiveText.tsx","components/LiveTextList.tsx","components/LiveBox.tsx","components/DayLiveList.tsx","components/LiveFancyList.tsx","components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["lives","atom","key","default","updatedAt","incomingLives","selector","get","state","aHourBefore","Date","now","filter","live","streaming","time","valueOf","liverImages","liverImageMap","getLives","a","fetch","res","json","Array","isArray","Error","map","getImgMap","data","AppEffect","setLiveState","useSetRecoilState","livesAtom","updateLives","useCallback","useEffect","interval","setInterval","clearInterval","useUpdateLives","setLiverImages","updateImgMap","useUpdateLiverImages","styles","css","emotionNormalize","groupByDay","groups","forEach","date","toLocaleDateString","push","Object","entries","sort","b","localeCompare","LiveText","props","streamer","guests","link","timeStr","dayjs","format","names","className","join","href","LiveTextList","groupNodes","useRecoilValue","liveNodes","videoId","Image","styled","img","Thumbnail","Card","div","Box","Time","LiveBox","livePreviewImage","alt","src","Section","section","LiveContainer","DayLiveList","dayGroup","boxes","LiveFancyList","group","Nav","nav","Ul","ul","Li","li","NavBar","style","fontWeight","to","target","rel","Main","main","App","GlobalStyle","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbdc9363.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { Live } from '../types';\n\ninterface LiveState {\n  updatedAt: Date | null;\n  lives: Live[];\n}\n\nconst defaultState: LiveState = {\n  updatedAt: null,\n  lives: [],\n};\n\nconst lives = atom({\n  key: 'lives',\n  default: defaultState,\n});\n\nexport const incomingLives = selector({\n  key: 'incomingLives',\n  get: ({ get }) => {\n    const state = get(lives);\n\n    const aHourBefore = Date.now() - 3600 * 1000;\n    return state.lives.filter((live) => (\n      live.streaming || live.time.valueOf() > aHourBefore\n    ));\n  },\n});\n\nexport default lives;\n","import { atom } from 'recoil';\nimport { LiverImgMap } from '../types';\n\ninterface LiverImage {\n  updatedAt: Date | null;\n  liverImageMap: LiverImgMap;\n}\n\nconst defaultState: LiverImage = {\n  updatedAt: null,\n  liverImageMap: {},\n};\n\nconst liverImages = atom({\n  key: 'liveImages',\n  default: defaultState,\n});\n\nexport default liverImages;\n","import { useEffect, useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport livesAtom from '../store/lives';\nimport liverImages from '../store/liverImages';\nimport { Live, LiverImgMap } from '../types';\n\nasync function getLives(): Promise<Live[]> {\n  const res = await fetch('https://holonow.github.io/holo-data/schedule.json');\n  const lives = await res.json();\n  if (!Array.isArray(lives)) {\n    throw new Error('Get lives failed');\n  }\n\n  return lives.map((live) => ({\n    ...live,\n    time: new Date(live.time),\n  }));\n}\n\nasync function getImgMap(): Promise<LiverImgMap> {\n  const res = await fetch('https://holonow.github.io/holo-data/imageMap.json');\n  const data = await res.json();\n  if (!data['赤井はあと']) {\n    throw new Error('Get image map failed');\n  }\n\n  return data;\n}\n\nfunction useUpdateLives() {\n  const setLiveState = useSetRecoilState(livesAtom);\n\n  const updateLives = useCallback(async () => {\n    const lives = await getLives();\n    setLiveState(() => ({\n      lives,\n      updatedAt: new Date(),\n    }));\n  }, [setLiveState]);\n\n  useEffect(() => {\n    updateLives();\n    const interval = setInterval(updateLives, 1000 * 60 * 5);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateLives]);\n}\n\nfunction useUpdateLiverImages() {\n  const setLiverImages = useSetRecoilState(liverImages);\n\n  const updateImgMap = useCallback(async () => {\n    const map = await getImgMap();\n    setLiverImages(() => ({\n      liverImageMap: map,\n      updatedAt: new Date(),\n    }));\n  }, [setLiverImages]);\n\n  useEffect(() => {\n    updateImgMap();\n    const interval = setInterval(updateImgMap, 1000 * 60 * 5);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateImgMap]);\n}\n\nfunction AppEffect() {\n  useUpdateLives();\n  useUpdateLiverImages();\n\n  return null;\n}\n\nexport default AppEffect;\n","import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport emotionNormalize from 'emotion-normalize';\n\nconst styles = css`\n  ${emotionNormalize}\n  html {\n  box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n`;\n\nexport default function () {\n  return <Global styles={styles} />;\n}\n","import { LiveGroup, Live } from '../types';\n\nexport function groupByDay(lives: Live[]): LiveGroup[] {\n  const groups: Record<string, LiveGroup> = {};\n  lives.forEach((live) => {\n    const { time } = live;\n    const date = time.toLocaleDateString();\n\n    if (!groups[date]) {\n      groups[date] = {\n        date,\n        lives: [],\n      };\n    }\n\n    groups[date].lives.push(live);\n  });\n\n  return Object.entries(groups)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([, value]) => (value));\n}\n","import React from 'react';\nimport dayjs from 'dayjs';\n\nimport { Live } from '../types';\n\ninterface Props {\n  live: Live\n}\n\nfunction LiveText(props: Props) {\n  const { live } = props;\n  const {\n    time, streamer, guests, link,\n  } = live;\n\n  const timeStr = dayjs(time).format('HH:mm');\n  const names = [streamer, ...guests];\n\n  return (\n    <div className=\"LiveText\">\n      {timeStr}\n      <br />\n      {names.join(' ')}\n      <br />\n      <a href={link}>{link}</a>\n    </div>\n  );\n}\n\nexport default LiveText;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { incomingLives } from '../store/lives';\nimport { groupByDay } from '../util/groupByDay';\nimport LiveText from './LiveText';\n\nfunction LiveTextList() {\n  const allLives = useRecoilValue(incomingLives);\n  const groups = groupByDay(allLives);\n\n  const groupNodes = groups.map(({ date, lives }) => {\n    const liveNodes = lives.map((live) => (\n      <LiveText key={live.videoId} live={live} />\n    ));\n\n    return (\n      <div key={date}>\n        <h2>{date}</h2>\n        {liveNodes}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"LiveList\">\n      {groupNodes}\n    </div>\n  );\n}\n\nexport default LiveTextList;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\n\nimport { Live } from '../types';\n\ninterface Props {\n  live: Live\n}\n\ninterface ImageProps {\n  streaming: boolean;\n}\n\nconst Image = styled.img`\n  width: 100%;\n  border: ${(props: ImageProps) => (props.streaming ? 'red' : 'lightgray')} solid 2px;\n`;\n\nconst Thumbnail = styled.a`\n  display: block;\n  width: 100%;\n`;\n\nconst Card = styled.div`\n  color: #444;\n`;\n\nconst Box = styled.div`\n  width: clamp(176px, 46vw, 250px);\n  padding: .125rem;\n`;\n\nconst Time = styled.time`\n  color: grey;\n  font-weight: bold;\n`;\n\nfunction LiveBox({ live }: Props) {\n  const {\n    link, livePreviewImage, time, streamer, guests, streaming,\n  } = live;\n  const names = [streamer, ...guests];\n\n  return (\n    <Box>\n      <Card>\n        <Time>\n          {dayjs(time).format('HH:mm')}\n        </Time>\n        <Thumbnail href={link}>\n          <Image alt=\"video-preview\" src={livePreviewImage} streaming={streaming} />\n        </Thumbnail>\n        {names.join(' ')}\n      </Card>\n    </Box>\n  );\n}\n\nexport default LiveBox;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { LiveGroup } from '../types';\nimport LiveBox from './LiveBox';\n\ninterface Props {\n  dayGroup: LiveGroup\n}\n\nconst Time = styled.time`\n  display: block;\n  font-weight: bold;\n  padding: .5rem;\n  text-align: center;\n`;\n\nconst Section = styled.section`\n  border-bottom: solid 1px lightgray;\n  margin-top: .5rem;\n  padding-bottom: 1rem;\n`;\n\nconst LiveContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nfunction DayLiveList({ dayGroup }: Props) {\n  const { lives, date } = dayGroup;\n\n  const boxes = lives.map((live) => (\n    <LiveBox key={live.videoId} live={live} />\n  ));\n\n  return (\n    <Section>\n      <Time>{date}</Time>\n      <LiveContainer>\n        {boxes}\n      </LiveContainer>\n    </Section>\n  );\n}\n\nexport default DayLiveList;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { groupByDay } from '../util/groupByDay';\nimport { incomingLives } from '../store/lives';\nimport DayLiveList from './DayLiveList';\n\nfunction LiveFancyList() {\n  const lives = useRecoilValue(incomingLives);\n  const groups = groupByDay(lives);\n\n  const groupNodes = groups.map((group) => (\n    <DayLiveList key={group.date} dayGroup={group} />\n  ));\n\n  return (\n    <div className=\"Lives\">\n      {groupNodes}\n    </div>\n  );\n}\n\nexport default LiveFancyList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nconst Nav = styled.nav`\n  padding-left: clamp(.5rem, 2vw, 1rem);\n  padding-right: clamp(.5rem, 2vw, 1rem);\n  background-color: #333;\n`;\n\nconst Ul = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n`;\n\nconst Li = styled.li`\n  float: left;\n\n  a {\n  display: block;\n  padding: 5px;\n  color: white;\n  text-decoration: none;\n  }\n\n  a:hover {\n    background-color: black;\n  }\n`;\n\nfunction NavBar() {\n  return (\n    <Nav>\n      <Ul>\n        <Li>\n          <Link style={{ fontWeight: 'bold' }} to=\"/\">[Holo now]</Link>\n        </Li>\n        <Li>\n          <Link to=\"/text\">Text</Link>\n        </Li>\n        <Li>\n          <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://holonow.github.io/holo-data/schedule.json\">\n            JSON\n          </a>\n        </Li>\n      </Ul>\n    </Nav>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nimport AppEffect from './components/AppEffect';\nimport GlobalStyle from './components/GlobalStyle';\nimport LiveTextList from './components/LiveTextList';\nimport LiveFancyList from './components/LiveFancyList';\nimport NavBar from './components/NavBar';\n\nconst Main = styled.main`\n  padding-left: clamp(.5rem, 2vw, 1rem);\n  padding-right: clamp(.5rem, 2vw, 1rem);\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyle />\n      <RecoilRoot>\n        <AppEffect />\n        <div className=\"App\">\n          <NavBar />\n          <Main>\n            <Switch>\n              <Route path=\"/text\">\n                <LiveTextList />\n              </Route>\n              <Route path=\"/\">\n                <LiveFancyList />\n              </Route>\n            </Switch>\n          </Main>\n        </div>\n      </RecoilRoot>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}