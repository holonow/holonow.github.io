{"version":3,"sources":["store/lives.ts","store/liverImages.ts","components/AppEffect.tsx","components/GlobalStyle.tsx","util/groupByDay.ts","components/LiveText.tsx","components/TextPagesContainer.tsx","components/LiveTextList.tsx","components/LiveBox.tsx","components/DayLiveList.tsx","components/LiveFancyList.tsx","store/ui.ts","components/OpenSettingButton.tsx","components/NavBar.tsx","components/About.tsx","components/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["livesAtom","atom","key","default","updatedAt","lives","livesFilter","startFrom","vtubers","filterLives","filter","today","Date","getDate","live","time","aHourBefore","now","streaming","valueOf","filterByTime","incomingLives","selector","get","state","liverImages","liverImageMap","getLives","a","fetch","res","json","Array","isArray","Error","map","getImgMap","data","AppEffect","setLiveState","useSetRecoilState","updateLives","useCallback","useEffect","interval","setInterval","clearInterval","useUpdateLives","setLiverImages","updateImgMap","useUpdateLiverImages","styles","css","emotionNormalize","groupByDay","groups","forEach","date","toLocaleDateString","push","Object","entries","sort","b","localeCompare","LiveBlock","styled","div","LiveText","props","streamer","guests","videoId","link","timeStr","dayjs","format","names","className","join","href","TextPagesContainer","LiveTextList","groupNodes","useRecoilValue","liveNodes","Image","img","Thumbnail","Card","Box","Time","LiveBox","livePreviewImage","alt","src","Section","section","LiveContainer","DayLiveList","dayGroup","boxes","LiveFancyList","group","showSettingsState","OpenSettingsButton","setShow","type","onClick","icon","faCog","Nav","nav","LeftUl","ul","RightUl","JsonLink","target","NavBar","style","fontWeight","to","faQuestionCircle","OpenSettingButton","GitHubLink","faGithub","About","Modal","open","CloseButtonDiv","SettingsDiv","ContentDiv","LabelGroup","Settings","useRecoilState","show","setFilter","handleTimeLabelClick","e","value","faTimes","checked","onChange","App","GlobalStyle","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13d85e4c.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { Live } from '../types';\n\ninterface LiveState {\n  updatedAt: Date | null;\n  lives: Live[];\n}\n\nconst defaultState: LiveState = {\n  updatedAt: null,\n  lives: [],\n};\n\nconst livesAtom = atom({\n  key: 'lives',\n  default: defaultState,\n});\n\ntype StartFrom = 'default' | 'today'\ninterface FilterState {\n  startFrom: StartFrom\n  vtubers: string[]\n}\n\nconst defaultFilterState: FilterState = {\n  startFrom: 'default',\n  vtubers: [],\n};\n\nexport const livesFilter = atom({\n  key: 'lives/filter',\n  default: defaultFilterState,\n});\n\nfunction filterByTime(lives: Live[], filter: FilterState) {\n  const { startFrom } = filter;\n\n  if (startFrom === 'today') {\n    const today = new Date().getDate();\n\n    return lives.filter((live) => (\n      live.time.getDate() === today\n    ));\n  }\n\n  // default filter\n  const aHourBefore = Date.now() - 3600 * 1000;\n  return lives.filter((live) => (\n    live.streaming || live.time.valueOf() > aHourBefore\n  ));\n}\n\nfunction filterLives(lives: Live[], filter: FilterState): Live[] {\n  return filterByTime(lives, filter);\n}\n\nexport const incomingLives = selector({\n  key: 'lives/incomingLives',\n  get: ({ get }) => {\n    const state = get(livesAtom);\n    const filter = get(livesFilter);\n\n    return filterLives(state.lives, filter);\n  },\n});\n\nexport default livesAtom;\n","import { atom } from 'recoil';\nimport { LiverImgMap } from '../types';\n\ninterface LiverImage {\n  updatedAt: Date | null;\n  liverImageMap: LiverImgMap;\n}\n\nconst defaultState: LiverImage = {\n  updatedAt: null,\n  liverImageMap: {},\n};\n\nconst liverImages = atom({\n  key: 'liveImages',\n  default: defaultState,\n});\n\nexport default liverImages;\n","import { useEffect, useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport livesAtom from '../store/lives';\nimport liverImages from '../store/liverImages';\nimport { Live, LiverImgMap } from '../types';\n\nasync function getLives(): Promise<Live[]> {\n  const res = await fetch('https://holonow.github.io/holo-data/schedule.json');\n  const lives = await res.json();\n  if (!Array.isArray(lives)) {\n    throw new Error('Get lives failed');\n  }\n\n  return lives.map((live) => ({\n    ...live,\n    time: new Date(live.time),\n  }));\n}\n\nasync function getImgMap(): Promise<LiverImgMap> {\n  const res = await fetch('https://holonow.github.io/holo-data/imageMap.json');\n  const data = await res.json();\n  if (!data['赤井はあと']) {\n    throw new Error('Get image map failed');\n  }\n\n  return data;\n}\n\nfunction useUpdateLives() {\n  const setLiveState = useSetRecoilState(livesAtom);\n\n  const updateLives = useCallback(async () => {\n    const lives = await getLives();\n    setLiveState(() => ({\n      lives,\n      updatedAt: new Date(),\n    }));\n  }, [setLiveState]);\n\n  useEffect(() => {\n    updateLives();\n    const interval = setInterval(updateLives, 1000 * 60 * 5);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateLives]);\n}\n\nfunction useUpdateLiverImages() {\n  const setLiverImages = useSetRecoilState(liverImages);\n\n  const updateImgMap = useCallback(async () => {\n    const map = await getImgMap();\n    setLiverImages(() => ({\n      liverImageMap: map,\n      updatedAt: new Date(),\n    }));\n  }, [setLiverImages]);\n\n  useEffect(() => {\n    updateImgMap();\n    const interval = setInterval(updateImgMap, 1000 * 60 * 5);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateImgMap]);\n}\n\nfunction AppEffect() {\n  useUpdateLives();\n  useUpdateLiverImages();\n\n  return null;\n}\n\nexport default AppEffect;\n","import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport emotionNormalize from 'emotion-normalize';\n\nconst styles = css`\n  ${emotionNormalize}\n\n  html {\n    box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    color: #EEE;\n    background-color: #121212;\n  }\n\n  a {\n    color: #EEE;\n  }\n\n  a:hover {\n    color: lightskyblue;\n  }\n`;\n\nexport default function () {\n  return <Global styles={styles} />;\n}\n","import { LiveGroup, Live } from '../types';\n\nexport function groupByDay(lives: Live[]): LiveGroup[] {\n  const groups: Record<string, LiveGroup> = {};\n  lives.forEach((live) => {\n    const { time } = live;\n    const date = time.toLocaleDateString();\n\n    if (!groups[date]) {\n      groups[date] = {\n        date,\n        lives: [],\n      };\n    }\n\n    groups[date].lives.push(live);\n  });\n\n  return Object.entries(groups)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([, value]) => (value));\n}\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport styled from '@emotion/styled';\n\nimport { Live } from '../types';\n\nconst LiveBlock = styled.div`\n  margin-bottom: .5rem;\n`;\n\ninterface Props {\n  live: Live\n}\n\nfunction LiveText(props: Props) {\n  const { live } = props;\n  const {\n    time, streamer, guests, videoId,\n  } = live;\n\n  const link = `https://youtu.be/${videoId}`;\n\n  const timeStr = dayjs(time).format('HH:mm');\n  const names = [streamer, ...guests];\n\n  return (\n    <LiveBlock className=\"LiveText\">\n      {timeStr}\n      <br />\n      {names.join(' ')}\n      <br />\n      <a href={link}>{link}</a>\n    </LiveBlock>\n  );\n}\n\nexport default LiveText;\n","import styled from '@emotion/styled';\n\nconst TextPagesContainer = styled.div`\n  padding: 0 clamp(.25rem, 2vw, 1rem);\n`;\n\nexport default TextPagesContainer;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { incomingLives } from '../store/lives';\nimport { groupByDay } from '../util/groupByDay';\nimport LiveText from './LiveText';\nimport TextPagesContainer from './TextPagesContainer';\n\nfunction LiveTextList() {\n  const allLives = useRecoilValue(incomingLives);\n  const groups = groupByDay(allLives);\n\n  const groupNodes = groups.map(({ date, lives }) => {\n    const liveNodes = lives.map((live) => (\n      <LiveText key={live.videoId} live={live} />\n    ));\n\n    return (\n      <section key={date}>\n        <h2>{date}</h2>\n        {liveNodes}\n      </section>\n    );\n  });\n\n  return (\n    <TextPagesContainer className=\"LiveList\">\n      {groupNodes}\n    </TextPagesContainer>\n  );\n}\n\nexport default LiveTextList;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\n\nimport { Live } from '../types';\n\ninterface Props {\n  live: Live\n}\n\ninterface ImageProps {\n  streaming: boolean;\n}\n\nconst Image = styled.img`\n  width: 100%;\n  border: ${(props: ImageProps) => (props.streaming ? 'red' : '#444')} solid 2px;\n`;\n\nconst Thumbnail = styled.a`\n  display: block;\n  width: 100%;\n`;\n\nconst Card = styled.div`\n`;\n\nconst Box = styled.div`\n  width: clamp(158px, 49vw, 250px);\n  padding: clamp(.125rem, .53vw, .25rem);\n  padding-bottom: clamp(.375rem, 1.5vw, .5rem);\n`;\n\nconst Time = styled.time`\n  font-weight: bold;\n`;\n\nfunction LiveBox({ live }: Props) {\n  const {\n    link, livePreviewImage, time, streamer, guests, streaming,\n  } = live;\n  const names = [streamer, ...guests];\n\n  return (\n    <Box>\n      <Card>\n        <Time>\n          {dayjs(time).format('HH:mm')}\n        </Time>\n        <Thumbnail href={link}>\n          <Image alt=\"video-preview\" src={livePreviewImage} streaming={streaming} />\n        </Thumbnail>\n        {names.join(' ')}\n      </Card>\n    </Box>\n  );\n}\n\nexport default LiveBox;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { LiveGroup } from '../types';\nimport LiveBox from './LiveBox';\n\ninterface Props {\n  dayGroup: LiveGroup\n}\n\nconst Time = styled.time`\n  display: block;\n  font-weight: bold;\n  padding: .5rem;\n  text-align: center;\n`;\n\nconst Section = styled.section`\n  border-bottom: solid 1px #444;\n  margin-top: .5rem;\n  padding-bottom: 1rem;\n`;\n\nconst LiveContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nfunction DayLiveList({ dayGroup }: Props) {\n  const { lives, date } = dayGroup;\n\n  const boxes = lives.map((live) => (\n    <LiveBox key={live.videoId} live={live} />\n  ));\n\n  return (\n    <Section>\n      <Time>{date}</Time>\n      <LiveContainer>\n        {boxes}\n      </LiveContainer>\n    </Section>\n  );\n}\n\nexport default DayLiveList;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { groupByDay } from '../util/groupByDay';\nimport { incomingLives } from '../store/lives';\nimport DayLiveList from './DayLiveList';\n\nfunction LiveFancyList() {\n  const lives = useRecoilValue(incomingLives);\n  const groups = groupByDay(lives);\n\n  const groupNodes = groups.map((group) => (\n    <DayLiveList key={group.date} dayGroup={group} />\n  ));\n\n  return (\n    <div className=\"Lives\">\n      {groupNodes}\n    </div>\n  );\n}\n\nexport default LiveFancyList;\n","import { atom } from 'recoil';\n\ntype ShowSettingsState = boolean\n\nconst defaultState: ShowSettingsState = true;\nexport const showSettingsState = atom({\n  key: 'ui/showSettings',\n  default: defaultState,\n});\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\n\nimport { showSettingsState } from '../store/ui';\n\nfunction OpenSettingsButton() {\n  const setShow = useSetRecoilState(showSettingsState);\n\n  const handleClick = () => {\n    setShow(true);\n  };\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      <FontAwesomeIcon icon={faCog} />\n    </button>\n  );\n}\n\nexport default OpenSettingsButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\n\nimport OpenSettingButton from './OpenSettingButton';\n\nconst Nav = styled.nav`\n  padding-left: clamp(.5rem, 2vw, 1rem);\n  padding-right: clamp(.5rem, 2vw, 1rem);\n  background-color: #333;\n\n  a, button {\n    display: block;\n    padding: 5px;\n    color: white;\n    text-decoration: none;\n    border: none;\n    background-color: rgba(0, 0, 0, 0);\n  }\n\n  a:hover, button:hover {\n    background-color: black;\n  }\n`;\n\nconst LeftUl = styled.ul`\n  float: left;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n\n  li {\n    float: left;\n  }\n`;\n\nconst RightUl = styled(LeftUl)`\n  float: none;\n  li {\n    float: right;\n  }\n`;\n\nconst JsonLink = () => (\n  // eslint-disable-next-line react/jsx-no-target-blank\n  <a target=\"_blank\" href=\"https://holonow.github.io/holo-data/schedule.json\">\n    JSON\n  </a>\n);\n\nfunction NavBar() {\n  return (\n    <Nav>\n      <LeftUl>\n        <li>\n          <Link style={{ fontWeight: 'bold' }} to=\"/\">[Holo Now]</Link>\n        </li>\n        <li>\n          <Link to=\"/text\">Text</Link>\n        </li>\n        <li>\n          <JsonLink />\n        </li>\n      </LeftUl>\n      <RightUl>\n        <li>\n          <Link to=\"/about\">\n            <FontAwesomeIcon icon={faQuestionCircle} />\n          </Link>\n        </li>\n        <li>\n          <OpenSettingButton />\n        </li>\n      </RightUl>\n    </Nav>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nimport TextPagesContainer from './TextPagesContainer';\n\nconst GitHubLink = () => (\n  // eslint-disable-next-line react/jsx-no-target-blank\n  <a target=\"_blank\" href=\"https://github.com/holonow/holonow.github.io\">\n    <FontAwesomeIcon icon={faGithub} />\n    {' '}\n    GitHub\n  </a>\n);\n\nfunction About() {\n  return (\n    <TextPagesContainer>\n      <h2>About Holo Now</h2>\n      <p>\n        Unofficial Hololive schedule viewer.\n      </p>\n      <p>\n        Checkout source code at\n        {' '}\n        <GitHubLink />\n      </p>\n    </TextPagesContainer>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { useRecoilState } from 'recoil';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { showSettingsState } from '../store/ui';\nimport { livesFilter } from '../store/lives';\n\ninterface ModalProps {\n  open: boolean\n}\n\nconst Modal = styled.div`\n  display: ${(props: ModalProps) => (props.open ? 'block' : 'none')};\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n`;\n\nconst CloseButtonDiv = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  padding-top: .5rem;\n  padding-right: .5rem;\n`;\n\nconst SettingsDiv = styled.div`\n  background-color: #333;\n  border: 1px solid #555;\n  margin: 2rem auto;\n  width: clamp(0px, 90%, 800px);\n\n  h3 {\n    margin: 0;\n  }\n`;\n\nconst ContentDiv = styled.div`\n  padding: 1rem;\n  padding-top: 0;\n`;\n\nconst LabelGroup = styled.div`\n  input {\n    margin-right: .25rem;\n    margin-left: 1rem;\n  }\n`;\n\nfunction Settings() {\n  const [show, setShow] = useRecoilState(showSettingsState);\n  const [filter, setFilter] = useRecoilState(livesFilter);\n\n  const close = () => setShow(false);\n  const handleTimeLabelClick: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { value } = e.target;\n    setFilter((state) => ({\n      ...state,\n      startFrom: (value as 'today'|'default'),\n    }));\n  };\n\n  return (\n    <Modal open={show}>\n      <SettingsDiv>\n        <CloseButtonDiv>\n          <FontAwesomeIcon onClick={close} icon={faTimes} />\n        </CloseButtonDiv>\n        <ContentDiv>\n          <h3>Filter</h3>\n          <LabelGroup>\n            Time\n            <label>\n              <input\n                type=\"radio\"\n                value=\"default\"\n                checked={filter.startFrom === 'default'}\n                onChange={handleTimeLabelClick}\n              />\n              default\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"today\"\n                checked={filter.startFrom === 'today'}\n                onChange={handleTimeLabelClick}\n              />\n              today\n            </label>\n          </LabelGroup>\n        </ContentDiv>\n      </SettingsDiv>\n    </Modal>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport AppEffect from './components/AppEffect';\nimport GlobalStyle from './components/GlobalStyle';\nimport LiveTextList from './components/LiveTextList';\nimport LiveFancyList from './components/LiveFancyList';\nimport NavBar from './components/NavBar';\nimport About from './components/About';\nimport Settings from './components/Settings';\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyle />\n      <RecoilRoot>\n        <AppEffect />\n        <div className=\"App\">\n          <NavBar />\n          <main>\n            <Switch>\n              <Route path=\"/text\">\n                <LiveTextList />\n              </Route>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/\">\n                <LiveFancyList />\n              </Route>\n            </Switch>\n            <Settings />\n          </main>\n        </div>\n      </RecoilRoot>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}