{"version":3,"sources":["store/lives.ts","components/AppEffect.tsx","components/LiveText.tsx","components/LiveTextList.tsx","components/LiveFancyList.tsx","components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["lives","atom","key","default","updatedAt","incomingLives","selector","get","state","aHourBefore","Date","now","filter","live","time","valueOf","getLives","a","fetch","res","json","Array","isArray","Error","map","AppEffect","useRecoilState","livesAtom","liveState","setLiveState","initLives","useCallback","useEffect","LiveText","props","streamer","guests","link","timeStr","toLocaleString","names","className","join","href","LiveList","useRecoilValue","LiveFancyList","blocks","livePreviewImage","toLocaleTimeString","alt","src","NavBar","to","target","rel","App","path","LiveTextList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aafaa41a.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { Live } from '../types';\n\ninterface LiveState {\n  updatedAt: Date | null;\n  lives: Live[];\n}\n\nconst defaultState: LiveState = {\n  updatedAt: null,\n  lives: [],\n};\n\nconst lives = atom({\n  key: 'lives',\n  default: defaultState,\n});\n\nexport const incomingLives = selector({\n  key: 'incomingLives',\n  get: ({ get }) => {\n    const state = get(lives);\n\n    const aHourBefore = Date.now() - 3600 * 1000;\n    return state.lives.filter((live) => (\n      live.time.valueOf() > aHourBefore\n    ));\n  },\n});\n\nexport default lives;\n","import { useEffect, useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport livesAtom from '../store/lives';\nimport { Live } from '../types';\n\nasync function getLives(): Promise<Live[]> {\n  const res = await fetch('https://holonow.github.io/holo-data/schedule.json');\n  const lives = await res.json();\n  if (!Array.isArray(lives)) {\n    throw new Error('Get lives failed');\n  }\n\n  return lives.map((live) => ({\n    ...live,\n    time: new Date(live.time),\n  }));\n}\n\nfunction AppEffect() {\n  const [liveState, setLiveState] = useRecoilState(livesAtom);\n  const initLives = useCallback(async () => {\n    const { updatedAt } = liveState;\n    if (updatedAt) { return; }\n\n    const lives = await getLives();\n    setLiveState(() => ({\n      lives,\n      updatedAt: new Date(),\n    }));\n  }, [liveState, setLiveState]);\n\n  useEffect(() => { initLives(); }, [initLives]);\n\n  return null;\n}\n\nexport default AppEffect;\n","import React from 'react';\n\nimport { Live } from '../types';\n\ninterface Props {\n  live: Live\n}\n\nfunction LiveText(props: Props) {\n  const { live } = props;\n  const {\n    time, streamer, guests, link,\n  } = live;\n\n  const timeStr = time.toLocaleString();\n  const names = [streamer, ...guests];\n\n  return (\n    <div className=\"LiveText\">\n      {timeStr}\n      <br />\n      {names.join(' ')}\n      <br />\n      <a href={link}>{link}</a>\n    </div>\n  );\n}\n\nexport default LiveText;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { incomingLives } from '../store/lives';\nimport LiveText from './LiveText';\n\nfunction LiveList() {\n  const lives = useRecoilValue(incomingLives);\n\n  return (\n    <div className=\"LiveList\">\n      {lives.map((live) => (\n        <LiveText live={live} />\n      ))}\n    </div>\n  );\n}\n\nexport default LiveList;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { incomingLives } from '../store/lives';\n\nfunction LiveFancyList() {\n  const lives = useRecoilValue(incomingLives);\n\n  const blocks = lives.map((live) => {\n    const {\n      link, livePreviewImage, time, streamer, guests,\n    } = live;\n    const names = [streamer, ...guests];\n    return (\n      <div key={live.link}>\n        {time.toLocaleTimeString()}\n        <br />\n        {names.join(' ')}\n        <br />\n        <a href={link}>\n          <img alt=\"video-preview\" src={livePreviewImage} />\n        </a>\n        <br />\n      </div>\n    );\n  });\n\n  return (\n    <>\n      {blocks}\n    </>\n  );\n}\n\nexport default LiveFancyList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NavBar() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/text\">Text Format</Link>\n        </li>\n        <li>\n          <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://holonow.github.io/holo-data/schedule.json\">\n            JSON\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport './App.css';\nimport AppEffect from './components/AppEffect';\nimport LiveTextList from './components/LiveTextList';\nimport LiveFancyList from './components/LiveFancyList';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <Router>\n      <RecoilRoot>\n        <AppEffect />\n        <div className=\"App\">\n          <NavBar />\n          <header className=\"App-header\">\n            <h1>Holo Now</h1>\n            <p>\n              A Tool to Watch Hololive\n            </p>\n            <p>\n              (Coming soon)\n            </p>\n          </header>\n          <Switch>\n            <Route path=\"/text\">\n              <LiveTextList />\n            </Route>\n            <Route path=\"/\">\n              <LiveFancyList />\n            </Route>\n          </Switch>\n        </div>\n      </RecoilRoot>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}