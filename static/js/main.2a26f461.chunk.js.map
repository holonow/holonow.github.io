{"version":3,"sources":["store/lives.ts","store/liverImages.ts","apis.ts","components/AppEffect.tsx","components/GlobalStyle.tsx","util/groupByDay.ts","store/ui.ts","components/LiveText.tsx","components/TextPagesContainer.tsx","components/LiveTextList.tsx","components/LiveBox.tsx","components/PageReloadButton.tsx","components/DayLiveList.tsx","components/LiveFancyList.tsx","components/OpenSettingButton.tsx","components/NavBar.tsx","components/About.tsx","components/Modal.tsx","components/Switch.tsx","util/memberList.ts","components/VtuberSelector.tsx","components/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["livesAtom","atom","key","default","updatedAt","lives","livesFilter","startFrom","vtubers","allVtubers","filterLives","filter","set","Set","x","has","streamer","guests","some","guest","filterByMember","today","Date","getDate","live","time","aHourBefore","now","streaming","valueOf","filterByTime","incomingLives","selector","get","state","liverImages","liverImageMap","getLives","a","fetch","res","json","Array","isArray","Error","map","getImgMap","data","AppEffect","setLiveState","useSetRecoilState","updateLives","useCallback","useEffect","interval","setInterval","clearInterval","useUpdateLives","setLiverImages","updateImgMap","useUpdateLiverImages","styles","css","emotionNormalize","groupByDay","groups","forEach","date","dayjs","format","push","Object","entries","sort","b","localeCompare","showSettingsState","showTitleState","LiveBlock","styled","div","LiveText","props","videoId","title","showTitle","useRecoilValue","Boolean","link","timeStr","names","className","join","target","rel","href","TextPagesContainer","LiveTextList","groupNodes","liveNodes","Image","img","Thumbnail","Card","Box","TitleBox","NameBox","LiveBox","livePreviewImage","alt","src","Button","loading","PageReloadButton","useState","setLoading","setLivesState","onButtonClick","setTimeout","onClick","icon","faSyncAlt","DateDiv","TimeH2","h2","Section","section","LiveContainer","DayLiveList","dayGroup","boxes","LiveFancyList","group","OpenSettingsButton","setShow","type","faCog","Nav","nav","LeftUl","ul","RightUl","JsonLink","NavBar","style","fontWeight","to","faQuestionCircle","OpenSettingButton","GitHubLink","faGithub","About","Modal","open","Label","label","Sidebar","span","Switch","checked","onChange","HOLO_GROUPS","name","members","flat","selected","Row","GroupButton","button","Icon","VtuberSelector","useRecoilState","setFilter","liverImagesState","vSet","icons","member","produce","draft","indexOf","currentVtubers","every","m","v","includes","CloseButtonDiv","SettingsDiv","ContentDiv","Fieldset","fieldset","Settings","show","setShowTitle","faTimes","App","GlobalStyle","path","exact","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a26f461.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { Live } from '../types';\n\ninterface LiveState {\n  updatedAt: Date | null;\n  lives: Live[];\n}\n\nconst defaultState: LiveState = {\n  updatedAt: null,\n  lives: [],\n};\n\nconst livesAtom = atom({\n  key: 'lives',\n  default: defaultState,\n});\n\ntype StartFrom = 'default' | 'today'\nexport interface FilterState {\n  startFrom: StartFrom\n  allVtubers: boolean\n  vtubers: string[]\n}\n\nconst defaultFilterState: FilterState = {\n  startFrom: 'default',\n  vtubers: [],\n  allVtubers: true,\n};\n\nexport const livesFilter = atom({\n  key: 'lives/filter',\n  default: defaultFilterState,\n});\n\nfunction filterByTime(lives: Live[], filter: FilterState) {\n  const { startFrom } = filter;\n\n  if (startFrom === 'today') {\n    const today = new Date().getDate();\n\n    return lives.filter((live) => (\n      live.time.getDate() === today\n    ));\n  }\n\n  // default filter\n  const aHourBefore = Date.now() - 3600 * 1000;\n  return lives.filter((live) => (\n    live.streaming || live.time.valueOf() > aHourBefore\n  ));\n}\n\nfunction filterByMember(lives: Live[], filter: FilterState) {\n  const { vtubers, allVtubers } = filter;\n  if (allVtubers) {\n    return lives;\n  }\n\n  const set = new Set(vtubers);\n  return lives.filter((x) => (\n    set.has(x.streamer) || x.guests.some((guest) => set.has(guest))\n  ));\n}\n\nfunction filterLives(lives: Live[], filter: FilterState): Live[] {\n  const filtered = filterByTime(lives, filter);\n  return filterByMember(filtered, filter);\n}\n\nexport const incomingLives = selector({\n  key: 'lives/incomingLives',\n  get: ({ get }) => {\n    const state = get(livesAtom);\n    const filter = get(livesFilter);\n\n    return filterLives(state.lives, filter);\n  },\n});\n\nexport default livesAtom;\n","import { atom } from 'recoil';\nimport { LiverImgMap } from '../types';\n\ninterface LiverImage {\n  updatedAt: Date | null;\n  liverImageMap: LiverImgMap;\n}\n\nconst defaultState: LiverImage = {\n  updatedAt: null,\n  liverImageMap: {},\n};\n\nconst liverImages = atom({\n  key: 'liveImages',\n  default: defaultState,\n});\n\nexport default liverImages;\n","import { Live, LiverImgMap } from './types';\n\nexport async function getLives(): Promise<Live[]> {\n  const res = await fetch('https://holonow.github.io/holo-data/schedule.json');\n  const lives = await res.json();\n  if (!Array.isArray(lives)) {\n    throw new Error('Get lives failed');\n  }\n\n  return lives.map((live) => ({\n    ...live,\n    time: new Date(live.time),\n  }));\n}\n\nexport async function getImgMap(): Promise<LiverImgMap> {\n  const res = await fetch('https://holonow.github.io/holo-data/imageMap.json');\n  const data = await res.json();\n  if (!data['赤井はあと']) {\n    throw new Error('Get image map failed');\n  }\n\n  return data;\n}\n","import { useEffect, useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport livesAtom from '../store/lives';\nimport liverImages from '../store/liverImages';\nimport { getLives, getImgMap } from '../apis';\n\nfunction useUpdateLives() {\n  const setLiveState = useSetRecoilState(livesAtom);\n\n  const updateLives = useCallback(async () => {\n    const lives = await getLives();\n    setLiveState(() => ({\n      lives,\n      updatedAt: new Date(),\n    }));\n  }, [setLiveState]);\n\n  useEffect(() => {\n    updateLives();\n    const interval = setInterval(updateLives, 1000 * 60 * 5);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateLives]);\n}\n\nfunction useUpdateLiverImages() {\n  const setLiverImages = useSetRecoilState(liverImages);\n\n  const updateImgMap = useCallback(async () => {\n    const map = await getImgMap();\n    setLiverImages(() => ({\n      liverImageMap: map,\n      updatedAt: new Date(),\n    }));\n  }, [setLiverImages]);\n\n  useEffect(() => {\n    updateImgMap();\n    const interval = setInterval(updateImgMap, 1000 * 60 * 5);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [updateImgMap]);\n}\n\nfunction AppEffect() {\n  useUpdateLives();\n  useUpdateLiverImages();\n\n  return null;\n}\n\nexport default AppEffect;\n","import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport emotionNormalize from 'emotion-normalize';\n\nconst styles = css`\n  ${emotionNormalize}\n\n  :root {\n    --bg-color: #181818;\n    --main-text-color: white;\n    --second-text-color: #AAA;\n  }\n\n  html {\n    box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    color: var(--second-text-color);\n    background-color: #181818;\n  }\n\n  a {\n    color: var(--second-text-color);\n  }\n\n  a:hover {\n    color: lightskyblue;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    color: var(--main-text-color);\n  }\n`;\n\nexport default function () {\n  return <Global styles={styles} />;\n}\n","import dayjs from 'dayjs';\nimport { LiveGroup, Live } from '../types';\n\nexport function groupByDay(lives: Live[]): LiveGroup[] {\n  const groups: Record<string, LiveGroup> = {};\n  lives.forEach((live) => {\n    const { time } = live;\n    const date = dayjs(time).format('YYYY/MM/DD');\n\n    if (!groups[date]) {\n      groups[date] = {\n        date,\n        lives: [],\n      };\n    }\n\n    groups[date].lives.push(live);\n  });\n\n  return Object.entries(groups)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([, value]) => (value));\n}\n","import { atom } from 'recoil';\n\nconst defaultShowSettingState = false;\nexport const showSettingsState = atom({\n  key: 'ui/showSettings',\n  default: defaultShowSettingState,\n});\n\nconst defaultShowTitleState = true;\nexport const showTitleState = atom({\n  key: 'ui/showLiveTitle',\n  default: defaultShowTitleState,\n});\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport styled from '@emotion/styled';\nimport { useRecoilValue } from 'recoil';\n\nimport { Live } from '../types';\nimport { showTitleState } from '../store/ui';\n\nconst LiveBlock = styled.div`\n  color: var(--main-text-color);\n`;\n\ninterface Props {\n  live: Live\n}\n\nfunction LiveText(props: Props) {\n  const { live } = props;\n  const {\n    time, streamer, guests, videoId, title,\n  } = live;\n  const showTitle = useRecoilValue(showTitleState) && Boolean(title);\n\n  const link = `https://youtu.be/${videoId}`;\n\n  const timeStr = dayjs(time).format('HH:mm');\n  const names = [streamer, ...guests];\n\n  return (\n    <LiveBlock className=\"LiveText\">\n      <time>{timeStr}</time>\n      <br />\n      {names.join('、')}\n      {showTitle && <br />}\n      {showTitle && title}\n      <br />\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>{link}</a>\n      <br />\n      <br />\n    </LiveBlock>\n  );\n}\n\nexport default LiveText;\n","import styled from '@emotion/styled';\n\nconst TextPagesContainer = styled.div`\n  padding: 0 clamp(.25rem, 2vw, 1rem);\n`;\n\nexport default TextPagesContainer;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { incomingLives } from '../store/lives';\nimport { groupByDay } from '../util/groupByDay';\nimport LiveText from './LiveText';\nimport TextPagesContainer from './TextPagesContainer';\n\nfunction LiveTextList() {\n  const allLives = useRecoilValue(incomingLives);\n  const groups = groupByDay(allLives);\n\n  const groupNodes = groups.map(({ date, lives }) => {\n    const liveNodes = lives.map((live) => (\n      <LiveText key={live.videoId} live={live} />\n    ));\n\n    return (\n      <section key={date}>\n        <h2>{date}</h2>\n        {liveNodes}\n      </section>\n    );\n  });\n\n  return (\n    <TextPagesContainer className=\"LiveList\">\n      {groupNodes}\n    </TextPagesContainer>\n  );\n}\n\nexport default LiveTextList;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\n\nimport { Live } from '../types';\n\ninterface Props {\n  live: Live\n}\n\ninterface ImageProps {\n  streaming: boolean;\n}\n\nconst Image = styled.img`\n  width: 100%;\n  border: ${(props: ImageProps) => (props.streaming ? 'red' : '#444')} solid 2px;\n`;\n\nconst Thumbnail = styled.a`\n  display: block;\n  width: 100%;\n`;\n\nconst Card = styled.div`\n`;\n\nconst Box = styled.div`\n  width: clamp(158px, 49vw, 250px);\n  padding: clamp(.125rem, .53vw, .25rem);\n  padding-bottom: clamp(.375rem, 1.5vw, .5rem);\n`;\n\nconst TitleBox = styled.div`\n  height: 2.3rem;\n  overflow: hidden;\n`;\nconst NameBox = styled.div`\n  color: var(--main-text-color);\n`;\n\nfunction LiveBox({ live }: Props) {\n  const {\n    link, livePreviewImage, time, streamer, guests, streaming, title,\n  } = live;\n  const names = [streamer, ...guests];\n  const timeStr = dayjs(time).format('HH:mm');\n\n  return (\n    <Box>\n      <Card>\n        <strong><time>{timeStr}</time></strong>\n        <Thumbnail rel=\"noopener noreferrer\" target=\"_blank\" href={link}>\n          <Image alt=\"video-preview\" src={livePreviewImage} streaming={streaming} />\n        </Thumbnail>\n        <NameBox>{names.join('、')}</NameBox>\n        <TitleBox>\n          {title}\n        </TitleBox>\n      </Card>\n    </Box>\n  );\n}\n\nexport default LiveBox;\n","import React, { useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport styled from '@emotion/styled';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport livesAtom from '../store/lives';\nimport { getLives } from '../apis';\n\ninterface ButtonProps {\n  loading: boolean;\n}\n\nconst Button = styled.div`\n  display: inline-block;\n  cursor: pointer;\n\n  ${(props: ButtonProps) => (props.loading ? 'animation: spin 2s linear infinite;' : '')}\n  @keyframes spin { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }\n`;\n\nfunction PageReloadButton() {\n  const [loading, setLoading] = useState(false);\n  const setLivesState = useSetRecoilState(livesAtom);\n\n  const onButtonClick = async () => {\n    if (loading) { return; }\n\n    setLoading(true);\n\n    const lives = await getLives();\n    setLivesState({\n      lives,\n      updatedAt: new Date(),\n    });\n\n    // Make animation longer\n    setTimeout(() => { setLoading(false); }, 1000);\n  };\n\n  return (\n    <Button onClick={onButtonClick} loading={loading}>\n      <FontAwesomeIcon icon={faSyncAlt} />\n    </Button>\n  );\n}\n\nexport default PageReloadButton;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { LiveGroup } from '../types';\nimport LiveBox from './LiveBox';\nimport PageReloadButton from './PageReloadButton';\n\ninterface Props {\n  dayGroup: LiveGroup\n}\n\nconst DateDiv = styled.div`\n  text-align: center;\n`;\n\nconst TimeH2 = styled.h2`\n  display: inline-block;\n  padding: .5rem;\n  margin: 0;\n  text-align: center;\n  font-size: 1.2rem;\n  font-weight: bold;\n`;\n\nconst Section = styled.section`\n  border-bottom: solid 1px #444;\n  margin-top: .5rem;\n  padding-bottom: 1rem;\n`;\n\nconst LiveContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nfunction DayLiveList({ dayGroup }: Props) {\n  const { lives, date } = dayGroup;\n\n  const boxes = lives.map((live) => (\n    <LiveBox key={live.videoId} live={live} />\n  ));\n\n  return (\n    <Section>\n      <DateDiv>\n        <TimeH2>\n          <time>{date}</time>\n        </TimeH2>\n        <PageReloadButton />\n      </DateDiv>\n      <LiveContainer>\n        {boxes}\n      </LiveContainer>\n    </Section>\n  );\n}\n\nexport default DayLiveList;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { groupByDay } from '../util/groupByDay';\nimport { incomingLives } from '../store/lives';\nimport DayLiveList from './DayLiveList';\n\nfunction LiveFancyList() {\n  const lives = useRecoilValue(incomingLives);\n  const groups = groupByDay(lives);\n\n  const groupNodes = groups.map((group) => (\n    <DayLiveList key={group.date} dayGroup={group} />\n  ));\n\n  return (\n    <div className=\"Lives\">\n      {groupNodes}\n    </div>\n  );\n}\n\nexport default LiveFancyList;\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\n\nimport { showSettingsState } from '../store/ui';\n\nfunction OpenSettingsButton() {\n  const setShow = useSetRecoilState(showSettingsState);\n\n  const handleClick = () => {\n    setShow(true);\n  };\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      <FontAwesomeIcon icon={faCog} />\n    </button>\n  );\n}\n\nexport default OpenSettingsButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\n\nimport OpenSettingButton from './OpenSettingButton';\n\nconst Nav = styled.nav`\n  padding-left: clamp(.5rem, 2vw, 1rem);\n  padding-right: clamp(.5rem, 2vw, 1rem);\n  background-color: #333;\n\n  a, button {\n    display: block;\n    padding: 5px;\n    color: white;\n    text-decoration: none;\n    border: none;\n    background-color: rgba(0, 0, 0, 0);\n  }\n\n  a:hover, button:hover {\n    background-color: black;\n  }\n`;\n\nconst LeftUl = styled.ul`\n  float: left;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n\n  li {\n    float: left;\n  }\n`;\n\nconst RightUl = styled(LeftUl)`\n  float: none;\n  li {\n    float: right;\n  }\n`;\n\nconst JsonLink = () => (\n  // eslint-disable-next-line react/jsx-no-target-blank\n  <a target=\"_blank\" href=\"https://holonow.github.io/holo-data/schedule.json\">\n    JSON\n  </a>\n);\n\nfunction NavBar() {\n  return (\n    <Nav>\n      <LeftUl>\n        <li>\n          <Link style={{ fontWeight: 'bold' }} to=\"/\">[Holo Now]</Link>\n        </li>\n        <li>\n          <Link to=\"/text\">Text</Link>\n        </li>\n        <li>\n          <JsonLink />\n        </li>\n      </LeftUl>\n      <RightUl>\n        <li>\n          <Link to=\"/about\">\n            <FontAwesomeIcon icon={faQuestionCircle} />\n          </Link>\n        </li>\n        <li>\n          <OpenSettingButton />\n        </li>\n      </RightUl>\n    </Nav>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nimport TextPagesContainer from './TextPagesContainer';\n\nconst GitHubLink = () => (\n  // eslint-disable-next-line react/jsx-no-target-blank\n  <a target=\"_blank\" href=\"https://github.com/holonow/holonow.github.io\">\n    <FontAwesomeIcon icon={faGithub} />\n    {' '}\n    GitHub\n  </a>\n);\n\nfunction About() {\n  return (\n    <TextPagesContainer>\n      <h2>About Holo Now</h2>\n      <p>\n        Unofficial Hololive schedule viewer.\n      </p>\n      <p>\n        Checkout source code at\n        {' '}\n        <GitHubLink />\n      </p>\n    </TextPagesContainer>\n  );\n}\n\nexport default About;\n","import styled from '@emotion/styled';\n\ninterface ModalProps {\n  open: boolean\n}\n\nconst Modal = styled.div`\n  display: ${(props: ModalProps) => (props.open ? 'block' : 'none')};\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n`;\n\nexport default Modal;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n  position: relative;\n  display: inline-block;\n  width: 30px;\n  height: 17px;\n  margin: 0 .5rem;\n\n  /* Hide default HTML checkbox */\n  input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  input:checked + .slider {\n    background-color: #2196F3;\n  }\n\n  input:focus + .slider {\n    box-shadow: 0 0 1px #2196F3;\n  }\n\n  input:checked + .slider:before {\n    transform: translateX(13px);\n  }\n`;\n\nconst Sidebar = styled.span`\n position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  border-radius: 17px;\n  transition: .4s;\n\n  :before {\n    position: absolute;\n    content: \"\";\n    height: 13px;\n    width: 13px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n    border-radius: 50%;\n  }\n`;\n\ninterface Props {\n  checked: boolean;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n}\nfunction Switch(props: Props) {\n  const { checked, onChange } = props;\n  return (\n    <Label>\n      <input type=\"checkbox\" checked={checked} onChange={onChange} />\n      <Sidebar className=\"slider\" />\n    </Label>\n  );\n}\n\nexport default Switch;\n","export const HOLO_GROUPS = [\n  {\n    name: '１期生',\n    members: [\n      '夜空メル',\n      'アキロゼ',\n      '赤井はあと',\n      '白上フブキ',\n      '夏色まつり',\n    ],\n  },\n  {\n    name: '２期生',\n    members: [\n      '湊あくあ',\n      '紫咲シオン',\n      '百鬼あやめ',\n      '癒月ちょこ',\n      '大空スバル',\n    ],\n  },\n  {\n    name: 'ゲーマ',\n    members: [\n      '大神ミオ',\n      '猫又おかゆ',\n      '戌神ころね',\n    ],\n  },\n  {\n    name: '３期生',\n    members: [\n      '兎田ぺこら',\n      '潤羽るしあ',\n      '不知火フレア',\n      '白銀ノエル',\n      '宝鐘マリン',\n    ],\n  },\n  {\n    name: '４期生',\n    members: [\n      '天音かなた',\n      '桐生ココ',\n      '角巻わため',\n      '常闇トワ',\n      '姫森ルーナ',\n    ],\n  },\n  {\n    name: '５期生',\n    members: [\n      '雪花ラミィ',\n      '桃鈴ねね',\n      '獅白ぼたん',\n      '尾丸ポルカ',\n    ],\n  },\n  {\n    name: 'ホ（他',\n    members: [\n      'ときのそら',\n      'ロボ子さん',\n      'さくらみこ',\n      '星街すいせい',\n      'AZKi',\n    ],\n  },\n];\n\nexport const HOLO_LIST = HOLO_GROUPS.map((x) => x.members).flat();\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport produce from 'immer';\nimport { HOLO_GROUPS } from '../util/memberList';\nimport { livesFilter, FilterState } from '../store/lives';\nimport liverImagesState from '../store/liverImages';\nimport Switch from './Switch';\n\ninterface ImageProps {\n  selected: boolean;\n}\nconst Image = styled.img`\n  border-radius: 50%;\n  width: 2.5rem;\n  border: 2px solid ;\n  border-color: ${(props: ImageProps) => (props.selected ? 'skyblue' : 'gray')};\n  filter: ${(props: ImageProps) => (props.selected ? '' : 'grayscale(.7)')};\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  img {\n    margin-left: .25rem;\n  }\n  margin-bottom: .5rem;\n`;\n\nconst GroupButton = styled.button`\n  padding: 0;\n  background-color: black;\n  border: none;\n  color: inherit;\n  height: calc(1.2rem + 2px);\n  width: calc(3rem + 2px);\n  flex-shrink: 0;\n  overflow: hidden;\n\n  :hover {\n    background-color: rgba(0,0,0,0);\n    border: solid black 1px;\n  }\n`;\n\ninterface IconProps {\n  name: string;\n  src: string;\n  selected: boolean;\n  onClick: React.MouseEventHandler<HTMLImageElement>;\n}\nfunction Icon(props: IconProps) {\n  const {\n    name, src, selected, onClick,\n  } = props;\n\n  return (\n    <Image selected={selected} alt={name} src={src} onClick={onClick} />\n  );\n}\n\nfunction VtuberSelector() {\n  const [filter, setFilter] = useRecoilState(livesFilter);\n  const { liverImageMap } = useRecoilValue(liverImagesState);\n\n  const { vtubers, allVtubers } = filter;\n  const vSet = new Set(vtubers);\n\n  const onAllVtubersChange = () => {\n    setFilter(produce((draft: FilterState) => {\n      draft.allVtubers = !draft.allVtubers;\n    }));\n  };\n\n  const groupNodes = HOLO_GROUPS.map(({ name, members }) => {\n    const icons = members.map((member) => {\n      const handleClick = () => {\n        setFilter(produce((draft: FilterState) => {\n          const index = draft.vtubers.indexOf(member);\n          if (index >= 0) {\n            draft.vtubers = draft.vtubers.filter((x) => x !== member);\n          } else {\n            draft.vtubers.push(member);\n          }\n\n          draft.allVtubers = false;\n        }));\n      };\n\n      return (\n        <Icon\n          key={member}\n          name={member}\n          selected={allVtubers || vSet.has(member)}\n          src={liverImageMap[member]}\n          onClick={handleClick}\n        />\n      );\n    });\n\n    const handleGroupClick = () => {\n      setFilter(produce((draft: FilterState) => {\n        const currentVtubers = new Set(draft.vtubers);\n        if (members.every((m) => currentVtubers.has(m))) {\n          draft.vtubers = draft.vtubers.filter((v) => !members.includes(v));\n        } else {\n          members\n            .filter((m) => !currentVtubers.has(m))\n            .forEach((m) => { draft.vtubers.push(m); });\n        }\n\n        draft.allVtubers = false;\n      }));\n    };\n\n    return (\n      <Row key={name}>\n        <GroupButton type=\"button\" onClick={handleGroupClick}>\n          {name}\n        </GroupButton>\n        {icons}\n      </Row>\n    );\n  });\n\n  return (\n    <div>\n      <Row>\n        全表示\n        <Switch checked={allVtubers} onChange={onAllVtubersChange} />\n      </Row>\n      {groupNodes}\n    </div>\n  );\n}\n\nexport default VtuberSelector;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport produce from 'immer';\nimport { useRecoilState } from 'recoil';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { showSettingsState, showTitleState } from '../store/ui';\nimport { livesFilter } from '../store/lives';\n\nimport Modal from './Modal';\nimport Switch from './Switch';\nimport VtuberSelector from './VtuberSelector';\n\nconst CloseButtonDiv = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  padding-top: .5rem;\n  padding-right: .5rem;\n`;\n\nconst SettingsDiv = styled.div`\n  background-color: #333;\n  border: 1px solid #555;\n  margin: 2rem auto;\n  width: clamp(0px, 90%, 800px);\n\n  h3 {\n    margin: 0;\n  }\n`;\n\nconst ContentDiv = styled.div`\n  padding: 1rem;\n  padding-top: 0;\n`;\n\nconst Fieldset = styled.fieldset`\n  border: none;\n  padding-left: 0;\n  margin-left: 0;\n`;\n\nfunction Settings() {\n  const [show, setShow] = useRecoilState(showSettingsState);\n  const [filter, setFilter] = useRecoilState(livesFilter);\n  const [showTitle, setShowTitle] = useRecoilState(showTitleState);\n\n  const close = () => setShow(false);\n  const handleTimeFilterChange: React.ChangeEventHandler<HTMLInputElement> = () => {\n    setFilter(produce((draft) => {\n      draft.startFrom = draft.startFrom === 'today' ? 'default' : 'today';\n    }));\n  };\n\n  return (\n    <Modal open={show}>\n      <SettingsDiv>\n        <CloseButtonDiv>\n          <FontAwesomeIcon onClick={close} icon={faTimes} />\n        </CloseButtonDiv>\n        <ContentDiv>\n          <h3>フィルター</h3>\n          <Fieldset>\n            今日のライブ\n            <Switch onChange={handleTimeFilterChange} checked={filter.startFrom === 'today'} />\n          </Fieldset>\n          <VtuberSelector />\n          <h3>設定</h3>\n          <Fieldset>\n            タイトルを表示\n            <Switch onChange={() => { setShowTitle((x) => !x); }} checked={showTitle} />\n          </Fieldset>\n        </ContentDiv>\n      </SettingsDiv>\n    </Modal>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport AppEffect from './components/AppEffect';\nimport GlobalStyle from './components/GlobalStyle';\nimport LiveTextList from './components/LiveTextList';\nimport LiveFancyList from './components/LiveFancyList';\nimport NavBar from './components/NavBar';\nimport About from './components/About';\nimport Settings from './components/Settings';\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyle />\n      <RecoilRoot>\n        <AppEffect />\n        <div className=\"App\">\n          <NavBar />\n          <main>\n            <Switch>\n              <Route path=\"/text\">\n                <LiveTextList />\n              </Route>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/\">\n                <LiveFancyList />\n              </Route>\n            </Switch>\n            <Settings />\n          </main>\n        </div>\n      </RecoilRoot>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}